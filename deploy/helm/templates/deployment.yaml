---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-frontend
  name: {{ .Release.Name }}-frontend
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas.frontend }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-frontend
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-frontend
    spec:
      imagePullSecrets:
      - name: pull-secret
      containers:
      - name: {{ .Release.Name }}-frontend
        imagePullPolicy: Always
        image: "{{ .Values.imageRegistry }}/{{ .Values.images.frontend.name}}:{{ .Values.images.frontend.tag }}"
        env:
        - name: API_HOST
          value: {{ .Release.Name }}-api
        - name: API_PORT
          value: "{{ .Values.apiPort }}"
        - name: PYTHONUNBUFFERED
          value: "1"
        ports:
        - containerPort: {{ .Values.frontendPort}}
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-api
  name: {{ .Release.Name }}-api
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas.api }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-api
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-api
    spec:
      imagePullSecrets:
      - name: pull-secret
      containers:
      - name: {{ .Release.Name }}-api
        imagePullPolicy: Always
        image: "{{ .Values.imageRegistry }}/{{ .Values.images.api.name}}:{{ .Values.images.api.tag }}"
        env:
        # Change this to switch models(today)
        - name: CONFIG_FILE
          value: "/config/config.yaml"
        - name: MODEL_ENDPOINT
          value: {{ .Release.Name }}-style-cpu-unaccelerated:{{ .Values.styleHttpPort}}
        - name: MODEL_NAME
          value: "magenta_arbitrary-image-stylization-v1"
        - name: WATERMARK
          value: "octoml_logo.png"
        ports:
        - containerPort: {{ .Values.apiPort}}
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: api-config-extra
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-style
  name: {{ .Release.Name }}-style
  namespace: {{ .Release.Namespace }}
  annotations:
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: 'true'
    prometheus.io/port: "{{ .Values.stylePromPort }}"
spec:
  replicas: {{ .Values.replicas.style }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-style
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-style
        octoml.ai/inference: triton
    spec:
      imagePullSecrets:
      - name: pull-secret
      containers:
      - name: {{ .Release.Name }}-style
        imagePullPolicy: Always
        image: "{{ .Values.imageRegistry }}/{{ .Values.images.style.name}}:{{ .Values.images.style.tag }}"
        command:
        - tritonserver
        args:
        - --model-repository=octoml/models
        - --strict-model-config=false
        ports:
        - containerPort: {{ .Values.styleHttpPort}}
          protocol: TCP
          name: http
        - containerPort: {{ .Values.styleGrpcPort}}
          protocol: TCP
          name: grpc
        - containerPort: {{ .Values.stylePromPort}}
          name: metrics
          protocol: TCP
        resources:
          limits:
            nvidia.com/gpu: 1 # requesting 1 GPU
      {{- if .Values.models.style.tolerations }}
      tolerations:
{{ toYaml .Values.models.style.tolerations | indent 6 }}
      {{- end }}
      {{- if .Values.models.style.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.models.style.nodeSelector | indent 8 }}
      {{- end }}

